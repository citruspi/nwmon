#!/usr/bin/env python
# -*- coding: utf8 -*-

import datetime
import inspect
import itertools
import json
import os
import re
import socket
import ssl
import sys


def nwmon_test(method):
    def test(params, endpoint):
        return ('{}({})'.format(method.__name__[5:], params),
                method(params, endpoint))
    return test


@nwmon_test
def test_response_content_includes(string, endpoint):
    return string in endpoint['response']


@nwmon_test
def test_response_content_matches_re(pattern, endpoint):
    return re.match(pattern, endpoint['response']) is not None


def load_nwmon_tests():
    return {n[5:]: o for n, o in inspect.getmembers(sys.modules[__name__])
            if (inspect.isfunction(o) and n.startswith('test_'))}


def load_endpoints():
    nwmon_tests = load_nwmon_tests()
    endpoints = []

    for d, e in [(x.strip(), x.strip().replace('.', '_').upper())
                 for x in os.environ['NWMON_ENDPOINTS'].split(',')]:
        for y in itertools.count():
            protocol = os.getenv('NWMON_ENDPOINT_{}_{}_PROTOCOL'.format(e, y))
            port = os.getenv('NWMON_ENDPOINT_{}_{}_PORT'.format(e, y))
            path = os.getenv('NWMON_ENDPOINT_{}_{}_PATH'.format(e, y))
            timeout = os.getenv('NWMON_ENDPOINT_{}_{}_TIMEOUT'.format(e, y))
            tests = []

            if (protocol, port, path) == (None, None, None) and y > 0:
                break
            elif (protocol, port, path) == (None, None, None) and y == 0:
                protocol = 'https'
                port = 443
                path = '/'
            else:
                protocol = protocol or 'https'
                port = port or 443
                path = path or '/'

            timeout = timeout or 5

            for x in itertools.count():
                type_ = os.getenv(
                    'NWMON_ENDPOINT_{}_{}_TEST_{}_TYPE'.format(e, y, x))
                params = os.getenv(
                    'NWMON_ENDPOINT_{}_{}_TEST_{}_PARAMS'.format(e, y, x))

                if (type_ is None) or (params is None):
                    break

                if not (type_ in nwmon_tests.keys()):
                    raise Exception('Undefined test type {}'.format(type_))

                tests.append((type_.strip(), params))

            if len(tests) == 0:
                tests.append(('response_content_matches_re',
                              r'HTTP/\d.\d (?:2|3)\d{2}'))

            endpoints.append({
                'domain': d,
                'protocol': protocol,
                'port': int(port),
                'path': path,
                'tests': tests,
                'timeout': int(timeout),
                'successful_tests': [],
                'failed_tests': [],
                'response': '',
                'available': False
            })

    return endpoints


def measure_endpoint(endpoint):
    nwmon_tests = load_nwmon_tests()
    host = None

    start_ts = datetime.datetime.now()

    try:
        host = socket.gethostbyname(endpoint['domain'])
        dns_resolved_ts = datetime.datetime.now()
    except Exception:
        endpoint['Error'] = 'Failed to perform DNS lookup'
        return endpoint

    tcp = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    tcp.settimeout(endpoint['timeout'])

    if endpoint['protocol'] == 'https':
        tcp = ssl.wrap_socket(tcp, ssl_version=ssl.PROTOCOL_TLS)

    conn_init_ts = datetime.datetime.now()

    tcp.connect((host, endpoint['port']))

    conn_est_ts = datetime.datetime.now()

    tcp.send('GET {} HTTP/1.1\r\nHost: {}\r\n\r\n'.format(endpoint['path'],
                                                          endpoint['domain']))

    request_init_ts = datetime.datetime.now()

    endpoint['response'] = tcp.recv(1)

    fbr_ts = datetime.datetime.now()

    while True:
        data = tcp.recv(1024)
        endpoint['response'] += data
        if len(data) < 1024:
            break

    lbr_ts = datetime.datetime.now()

    tcp.close()

    millidiff = lambda x, y: (x-y).total_seconds() * 1000

    endpoint['metrics'] = {
        'dns_name_lookup': millidiff(dns_resolved_ts, start_ts),
        'connection_established': millidiff(conn_est_ts, conn_init_ts),
        'time_to_first_byte': millidiff(fbr_ts, request_init_ts),
        'time_to_last_byte': millidiff(lbr_ts, fbr_ts)
    }

    endpoint['successful_tests'] = []
    endpoint['failed_tests'] = []

    for test_name, param in endpoint['tests']:
        name, success = nwmon_tests[test_name](param, endpoint)

        endpoint['successful_tests' if success else 'failed_tests'].append(
            name)

    return endpoint


def output_endpoint_text(endpoint, last=False):
    print('Endpoint:\t\t{}://{}:{}{}'.format(
        endpoint['protocol'], endpoint['domain'], endpoint['port'],
        endpoint['path']))

    if 'error' in endpoint:
        print('Error:\t\t\t{}\n'.format(endpoint['error']))

    print('DNS Name Lookup:\t{}ms'.format(
        endpoint['metrics'].get('dns_name_lookup', -1)))
    print('Connection Established:\t{}ms'.format(
        endpoint['metrics'].get('connection_established', -1)))
    print('Time to First Byte:\t{}ms'.format(
        endpoint['metrics'].get('time_to_first_byte', -1)))
    print('Time to Last Byte:\t{}ms\n'.format(
        endpoint['metrics'].get('time_to_last_byte', -1)))

    print('Successful Tests')
    for test in endpoint['successful_tests']:
        print(test)

    print('\nFailed Tests')
    for test in endpoint['failed_tests']:
        print(test)

    if not last:
        print('\n' + '-' * 40 + '\n')


def output_endpoint_json(endpoint):
    del endpoint['response']
    del endpoint['timeout']
    return endpoint


def nwmon():
    endpoints = [measure_endpoint(e)
                 for e in load_endpoints()]

    for endpoint in endpoints:
        if len(endpoint['failed_tests']) == 0:
            endpoint['available'] = True

    output_mode = os.getenv('NWMON_OUTPUT_MODE', 'text').lower()

    if output_mode == 'text':
        for idx, endpoint in enumerate(endpoints):
            output_endpoint_text(endpoint, idx == len(endpoints)-1)
    elif output_mode == 'json':
        print(json.dumps(
            {
                "endpoints": [output_endpoint_json(e) for e in endpoints]
            }))
    elif output_mode == 'jsonpretty':
        print(json.dumps(
            {
                "endpoints": [output_endpoint_json(e) for e in endpoints]
            }, indent=4, sort_keys=True))



if __name__ == '__main__':
    nwmon()
