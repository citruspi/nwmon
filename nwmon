#!/usr/bin/env python
# -*- coding: utf8 -*-

import datetime
import inspect
import itertools
import os
import socket
import sys
try:
    import urllib2
except ImportError:
    import urllib.request as urllib2


def time_execution(method):
    def timed(*args, **kwargs):
        start = datetime.datetime.now()
        response = method(*args, **kwargs)
        end = datetime.datetime.now()

        return (response, (end-start).total_seconds() * 1000)
    return timed


def nwmon_test(method):
    def test(params, endpoint):
        return ('{}({})'.format(method.__name__[5:], params),
                method(params, endpoint))
    return test


@nwmon_test
def test_response_status_code_is(expected_response_status_code, endpoint):
    return endpoint['response_status_code'] == int(
        expected_response_status_code)


@nwmon_test
def test_response_content_includes(string, endpoint):
    return string in endpoint['response_content']


def load_nwmon_tests():
    return {n[5:]: o for n, o in inspect.getmembers(sys.modules[__name__])
            if (inspect.isfunction(o) and n.startswith('test_'))}


def load_endpoints():
    nwmon_tests = load_nwmon_tests()
    endpoints = []

    for d, e in [(x.strip(), x.strip().replace('.', '_').upper())
                 for x in os.environ['NWMON_ENDPOINTS'].split(',')]:
        for y in itertools.count():
            protocol = os.getenv('NWMON_ENDPOINT_{}_{}_PROTOCOL'.format(e, y))
            port = os.getenv('NWMON_ENDPOINT_{}_{}_PORT'.format(e, y))
            path = os.getenv('NWMON_ENDPOINT_{}_{}_PATH'.format(e, y))
            timeout = os.getenv('NWMON_ENDPOINT_{}_{}_TIMEOUT'.format(e, y))
            tests = []

            if (protocol, port, path) == (None, None, None) and y > 0:
                break
            elif (protocol, port, path) == (None, None, None) and y == 0:
                protocol = 'https'
                port = 443
                path = '/'
            else:
                protocol = protocol or 'https'
                port = port or 443
                path = path or '/'

            timeout = timeout or 5

            for x in itertools.count():
                type_ = os.getenv(
                    'NWMON_ENDPOINT_{}_{}_TEST_{}_TYPE'.format(e, y, x))
                params = os.getenv(
                    'NWMON_ENDPOINT_{}_{}_TEST_{}_PARAMS'.format(e, y, x))

                if (type_ is None) or (params is None):
                    break

                if not (type_ in nwmon_tests.keys()):
                    raise Exception('Undefined test type {}'.format(type_))

                tests.append((type_.strip(), params))

            endpoints.append({
                'domain': d,
                'protocol': protocol,
                'port': int(port),
                'path': path,
                'tests': tests,
                'timeout': int(timeout)
            })

    return endpoints


@time_execution
def dns_name_lookup(name):
    try:
        return (None, socket.gethostbyname(name))
    except Exception as ex:
        return ('Error performing DNS name lookup: {}'.format(str(ex)), None)


@time_execution
def establish_connection(endpoint):
    uri = "{}://{}:{}{}".format(endpoint['protocol'], endpoint['domain'],
                                endpoint['port'], endpoint['path'])

    open_director = urllib2.build_opener()
    request = urllib2.Request(uri)
    try:
        return (None, open_director.open(request, timeout=endpoint['timeout']))
    except Exception as ex:
        return ('Error establishing connection: {}'.format(str(ex)), None)


@time_execution
def read(src, size=None):
    try:
        return (None, src.read(size) if size else src.read())
    except Exception as ex:
        return ('Error reading from stream: {}'.format(str(ex)), None)


def monitor_endpoint(endpoint):
    endpoint['metrics'] = {}
    endpoint['success'] = 0
    endpoint['response_status_code'] = -1

    dns_lookup_result, endpoint['metrics']['dns_name_lookup'] = dns_name_lookup(endpoint['domain'])

    if dns_lookup_result[1] is None:
        endpoint['error'] = dns_lookup_result[0]
        return endpoint

    stream, endpoint['metrics']['connection_established'] = establish_connection(endpoint)

    if stream[1] is None:
        endpoint['error'] = stream[0]
        return endpoint

    response, endpoint['metrics']['time_to_first_byte'] = read(stream[1], 1)

    if response[1] is None:
        endpoint['error'] = response[0]
        return endpoint

    aresponse, endpoint['metrics']['time_to_last_byte'] = read(stream[1])

    if aresponse[1] is None:
        endpoint['error'] = response[0]
        return endpoint

    endpoint['response_status_code'] = stream[1].getcode()
    endpoint['response_content'] = response[1] + aresponse[1]

    return endpoint


def test_endpoint(endpoint, tests):
    for test_name, param in endpoint['tests']:
        name, success = tests[test_name](param, endpoint)

        if not success:
            endpoint['error'] = 'Failed test {}'.format(name)
            break

    return endpoint


def nwmon():
    nwmon_tests = load_nwmon_tests()
    endpoints = [test_endpoint(monitor_endpoint(e), nwmon_tests)
                 for e in load_endpoints()]


if __name__ == '__main__':
    nwmon()
