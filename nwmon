#!/usr/bin/env python
# -*- coding: utf8 -*-

import datetime
import inspect
import itertools
import os
import re
import socket
import ssl
import sys
try:
    import urllib2
except ImportError:
    import urllib.request as urllib2


def time_execution(method):
    def timed(*args, **kwargs):
        start = datetime.datetime.now()
        response = method(*args, **kwargs)
        end = datetime.datetime.now()

        return (response, (end-start).total_seconds() * 1000)
    return timed


def nwmon_test(method):
    def test(params, endpoint):
        return ('{}({})'.format(method.__name__[5:], params),
                method(params, endpoint))
    return test


@nwmon_test
def test_response_status_code_is(expected_response_status_code, endpoint):
    return endpoint['response_status_code'] == int(
        expected_response_status_code)


@nwmon_test
def test_response_status_code_in(acceptable_response_status_codes, endpoint):
    return endpoint['response_status_code'] in [
        int(x.strip())for x in acceptable_response_status_codes.split(',')]


@nwmon_test
def test_response_status_code_matches_re(pattern, endpoint):
    return re.match(pattern, str(endpoint['response_status_code'])) is not None


@nwmon_test
def test_response_content_includes(string, endpoint):
    return string in endpoint['response_content']


@nwmon_test
def test_response_content_matches_re(pattern, endpoint):
    return re.match(pattern, endpoint['response_content']) is not None


def load_nwmon_tests():
    return {n[5:]: o for n, o in inspect.getmembers(sys.modules[__name__])
            if (inspect.isfunction(o) and n.startswith('test_'))}


def load_endpoints():
    nwmon_tests = load_nwmon_tests()
    endpoints = []

    for d, e in [(x.strip(), x.strip().replace('.', '_').upper())
                 for x in os.environ['NWMON_ENDPOINTS'].split(',')]:
        for y in itertools.count():
            protocol = os.getenv('NWMON_ENDPOINT_{}_{}_PROTOCOL'.format(e, y))
            port = os.getenv('NWMON_ENDPOINT_{}_{}_PORT'.format(e, y))
            path = os.getenv('NWMON_ENDPOINT_{}_{}_PATH'.format(e, y))
            timeout = os.getenv('NWMON_ENDPOINT_{}_{}_TIMEOUT'.format(e, y))
            tests = []

            if (protocol, port, path) == (None, None, None) and y > 0:
                break
            elif (protocol, port, path) == (None, None, None) and y == 0:
                protocol = 'https'
                port = 443
                path = '/'
            else:
                protocol = protocol or 'https'
                port = port or 443
                path = path or '/'

            timeout = timeout or 5

            for x in itertools.count():
                type_ = os.getenv(
                    'NWMON_ENDPOINT_{}_{}_TEST_{}_TYPE'.format(e, y, x))
                params = os.getenv(
                    'NWMON_ENDPOINT_{}_{}_TEST_{}_PARAMS'.format(e, y, x))

                if (type_ is None) or (params is None):
                    break

                if not (type_ in nwmon_tests.keys()):
                    raise Exception('Undefined test type {}'.format(type_))

                tests.append((type_.strip(), params))

            if len(tests) == 0:
                tests.append(('response_status_code_matches_re',
                              r'(?:2|3)\d{2}'))

            endpoints.append({
                'domain': d,
                'protocol': protocol,
                'port': int(port),
                'path': path,
                'tests': tests,
                'timeout': int(timeout)
            })

    return endpoints


def measure_endpoint(endpoint):
    nwmon_tests = load_nwmon_tests()
    host = None

    start_ts = datetime.datetime.now()

    try:
        host = socket.gethostbyname(endpoint['domain'])
        dns_resolved_ts = datetime.datetime.now()
    except Exception:
        endpoint['Error'] = 'Failed to perform DNS lookup'
        return endpoint

    tcp = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    if endpoint['protocol'] == 'https':
        tcp = ssl.wrap_socket(tcp, ssl_version=ssl.PROTOCOL_TLS)

    conn_init_ts = datetime.datetime.now()

    tcp.connect((host, endpoint['port']))

    conn_est_ts = datetime.datetime.now()

    tcp.send('GET {} HTTP/1.1\r\nHost: {}\r\n\r\n'.format(endpoint['path'],
                                                          endpoint['domain']))

    request_init_ts = datetime.datetime.now()

    endpoint['response'] = tcp.recv(1)

    fbr_ts = datetime.datetime.now()

    while True:
        data = tcp.recv(1024)
        endpoint['response'] += data
        if len(data) < 1024:
            break

    lbr_ts = datetime.datetime.now()

    tcp.close()

    millidiff = lambda x, y: (x-y).total_seconds() * 1000

    endpoint['metrics'] = {
        'dns_name_lookup': millidiff(dns_resolved_ts, start_ts),
        'connection_established': millidiff(conn_est_ts, conn_init_ts),
        'time_to_first_byte': millidiff(fbr_ts, request_init_ts),
        'time_to_last_byte': millidiff(lbr_ts, fbr_ts)
    }

def test_endpoint(endpoint, tests):
    endpoint['successful_tests'] = []
    endpoint['failed_tests'] = []

    for test_name, param in endpoint['tests']:
        name, success = tests[test_name](param, endpoint)

        endpoint['successful_tests' if success else 'failed_tests'].append(
            name)

    return endpoint


def nwmon():
    nwmon_tests = load_nwmon_tests()
    endpoints = [test_endpoint(monitor_endpoint(e), nwmon_tests)
                 for e in load_endpoints()]


if __name__ == '__main__':
    nwmon()
